                                            OPERADORES LOGICOS 
existen 3 tipos de operadores logicos 
AND -- se ve representado asi (&&) y sirve para colocar dos o mas prepociciones que se deben cumplir 
OR -- se ve representado asi (||) y sirve para que se puede escojer eentre una u otra prepocicion 
NOT -- se ve representado asi (!) 


-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
                                            FOR Y WHILE 
Es la forma rapida para hacer procesos repetitivos ya sean contar o ir sumando repetiticamente algo , y se usa for o while que se utlizan asi:

FOR --- se utiliza junto con un parentesis y va dividido en 3 secciones --(vairable de iteracion (i) i=0 ; condicion de cumplimiento (mientras esta
condicion sea verdadera el bucle segira ejecutandose) i < 10 ; El aumento i ++ , i+=2 , i+=3) ejemplo

for ( i = 0 ; i < 20; i++ )

WHILE --- el while esta compuesto de varios factores uno de ellos es que se empieza con el while(factores que se tienen que cumplir )
a diferencia del for , esta es una evaluacion logica que retorna un verdader o un false . 

DIFERENCIAS ENTRE FOR Y WHILE
-La primera diferencia es que el FOR se usa cuando se sabe la cantidad exacta de pasos que vamos a seguir pero el WHILE  se utiliza cuando 
no sabemos lo pasos con certeza para funalizar la ejecucion 
- Se tiene que tener en cuenta que para hacer el incremento del for se hace con los sigientes simbolos (i += numero de icremento );

COMPLEMENTOS EXTRAS DE LOS BUCLES 

SWICH -- Es una expresion que compara el valor con la instancia, el swich esta conformado por 4 secciones , 
    *swich , que esta sirve para escojer la instancia o variable que se debe cumplir 
    * case , esta va a cont ener la variable en si 
    * breack , esto es para que rompa el ciclo una vez ya halla encontrado el valor correspondiente 
    *default , cuando no se halla encontrado ninguna de las instancias , se ejecutara el default
DO WHILE -- funciona como el while pero antes de entrar al ciclo ejecuta , ejecuta lo que esta dentro de el do , y si lo que esta dentro de el
do cumple lo dicho este entrara al ciclo , es decir que si la variable cumple con lo lo propuesto en el while , este entrara a de lleno a 
ejecutar el do 
    *do -- cumple la ejecucion , y siempre se ejecuta una vez asi no este dentro de los parametros
    *while -- es la que mira la condicion para hacer el ciclo , siempre esta acompa;ado de una variable 
CONTINUE -- el continue funciona para romper la ejecucion de una fucnion sin salir del cilclo que se esta ejecutando .
BREACK -- breack sirve para romper el ciclo 
-_-_-_-_-_-_-_--_-_-_-_-_-_-_--_-_-_-_-_-_-_--_-_-_-_-_-_-_--_-_-_-_-_-_-_--_-_-_-_-_-_-_--_-_-_-_-_-_-_--_-_-_-_-_-_-_--_-_-_-_-_-_-_--_-_-_-_-_-_-_-
                                             ARRAYS O LISTAS     
los arreglos funcionan como un contenedor de listas y en este se puede guardar ciertos elementos 
ELEMENTOS : es aquello que contiene la lista [ elemento1 , elemento2 , elemento3]
INDICE : es la pocicion en la que se encuentra el elemento [ 0,1,2] y siempre inicia desde el cero 

 ARREGLOS DE ARRAYS
.length = nos permite ver cuantos elementos tiene un arreglo 
.push = agrega elementos al final de la lista 
.inshift = agrega elementos al inicio de la lista 
.pop() = elimina el ultimo elemetno de la lista 
.shift() = elimina el primer elemento de la lista
.includes() = revisa si el elemento dentro del parentesis esta en la lista la respuesta sera un boleano
.every () = revisa si todos los elementos cumplen con la condicion dada en los parentesis 


.split(") =  separa las letras de una palabra, si se coloca una letra , separa la palabra cada vez que encuentre esa palabra
.join(") = esta funcion une las letras o elementos que esten en una lista 
.foreach() = funciona para separar los numeros de las 


