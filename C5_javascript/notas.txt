en javascript se define 2 cosas una variable y un valor , a las variables se les 
puede asigbnar un valor y va en este orden 

var cajon1

primero va el codigo (var) que es indicando la variable y despues el  valor que
le quisieramos dar en este caso "cajon1"

para agregarle un contenido a esta variable se puede hacer en un paso colocando 
un ='bufanda' entinces la variable cajon 1 nos quedaria con el valor bufanda asi

var cajon1='bufanda'

todos los valores que se almacenen en estos variables tendran un dato asociado 
es decir , valores o palabras
-- PALABRAS -las palabras se identifican al estar dentro de comiilas dobles o simples 
ejemplo 'bufanda' "guantes" etc 

-- NUMEROS -para agregar un valor con numeros este se debe colocar sin comillas es decir
, estos pueden ser , negativos , enteros o decimales 
var numero = 13;

-- BOLEANOS - se agrega boleanos para determinar si es falso o verdadero , si o no etc
cabe recalcar que estos se colocan sin comillas 
var estoyEntendiendo = true;
var estoyaburrido = false'

-- UNDEFINE - esto pasa cuando el valor no esta definido o vacio , es como decir que 
el cajon este vacio por ejemplo 

var cajon2 ;
console.log(cajon2);

--NULL- sirce similar a undefine pero le da un valor a la variable que es nulo o 0 

val sinNada = null;
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                            OPERADORES Y PRECEDENCIA 
    el comando console.log(operacion); sirce para mostrar en la consola lo que sucede dentro del parentesis
OPERADORES  , + , - , * , / , son para calcular un valor de 2 o mas elementos 

Modulo o resto  %   este simbolo indica el resto o residuo de una division esto nos sirve 
para determinar si este es divisible entre un numero o no 

-REGLAS DE PRECEDENCIA-- las reglas de precedencia son aquellas que determinan la gerarquia de 
un simbolo , es decir , en una operacion (3 + 5 * 8 - 3 ) primero va a realizar la operacion de 
lu multiplicacion y por ulimo la suma y resta 

Para que la regla de precedencia no aplica o aplique de diferente modo se debe colocar parentesis 
en las operaciones 

-_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_
                                ADICION Y STRINGS 
los operadores no solo se pueden aplicar a los numero tambien se puede aplicar a las palabras o strings esto hace que 
concatene las palabra y variables   por ejemplo 

colsole.log(hola + juan ) = hola juan 

-_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_
                                    OPERADORES DE COMPARACION

Los operadores de comparacion funcionan igual que los operadores en las matematicas 
<, >, >=, <= , ==, != al colocar un valor numerico en cualquiera de estos comparaciones este nos dara la respuesta en un 
valor boleanos ya puede ser true o false 
-UTILIDAD DE OPERADORES -- 
- = - este es el operador de asignacion ,  sirve para asignarle a un elemento o remplazar otro elemento en si es decir 
a = b donde a = 2 

- == - compara no estrictamente si el valor es igual es decir 3 == '3' true , porque la palabra 3 coincide con el variable numero
- === - compara estrictamente1 si es valor es igual es decir 3 === '3' false , porque se esta comparando una palabra con un numero 
-_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_
                                        FUNCIONES 
Las funciones , son aquellas que se determinan por un un f(x) 

para declarar una funcion en javascript hay muchas formas de hacerlo primero se debe declarar la funcion con la palabra (function)
despues se debe colocar el nombre de la funcion , por lo siguiente se debe colocar el argumento de la funcion en un parentesis (x)
y por ultimo en unas llaves se escribe la funcion en si (return x + 3 )
Existen varios tipos de declarar una funcion .
function ejemplo1 (x){}
var ejemplo2 = function ejemplo1(x){}          aqui la funcion pertenece a la variable ejemplo2
var ejemplo3 = (x) => {}                        aqui en este ejemplo se determina la funcion con una flecha 

ERRORES COMUNES 
 
 no se debe confundir RETURN con CONSOLE.LOG son comandos muy distintos 

 console.log() esta instruccion imprime algo en la consola , o da una vista de una variable en si , esto es una ayuda de una vista previa para los 
 programadores , se debe tener en cuenta , que en el codigo no tiene que haber un console log 1

 return = el return sirve para colocar el valor verdadero , osea lo que retorna verdaderamente la operacion , esto se usa para las funciones en si 
 y las operaciones 
 "OJO todo lo que se encuentra por debajo del return no se ejecutara en el codigo "
-_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_

                                                    NMENCLATURAS 
    las nomenclaturas son formas de llamar a las cosas y , existen ciertas reglas que se debe segir y esto tiene un estandar de trabajo dentro de los 
    equipos de desarollo de software 

    EXISTEN 3 TIPOS DE NOMENCLATURAS ( camelCase , PascalCase , snake_case)

    -- camelCase = el camelCase se usa para la union de dos o mas palabras sin espacios entre ellas pero diferneciadas por una letra mayuscula 
    inicial a partir de la segunda palabra como por ejemplo holaMundo / funcionEdadPersonas

    --PascalCase = es similar al camelCase pero aqui las palabras que vienen unidas sin espacios entre ellas pero todas las letras inicias con 
    la letra mayuscula incluyendo la primera

    --snake_case = la nomenclatura snake case se diferencia en que los espacios van sustituidos por un raya al piso y todas las teras de este son 
    minusculas 
-_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_

                                    CONTROL DE FLUGO (IF/ELSE)
Codigo condicional = codigo que sigue ciertas condiciones y depende a esto sigue para un lado o para el otro 
permiten que se cumplan unas u otras condiciones 

para hacer un ocndicional en codigo primero se debe colocar IF que es en si el condicional despues entre parentesis la condicion que vamos a 
escribir , esta condicion siempre se va a resumir en una comparacion buleana y entre llaves , lo que se va a ejecutar si esta comparacion es 
verdadera ejemplo 

function viajar(destino) {
    if (destino === 'Brasil'){
        console.log('Gire a la izquierda)
    }
}

ElSE IF = si la primera condicion echa por if no se cunple esta va a seguir con la siguiente condicion que es else if , y asi sucesivamente 

ELSE = si ninguna de las condiciones se cumle va a tomar la condicion else 
-_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_-_-_-_-_-_--_-_-_-_-_
                                                           OBJETO MATH 
los objetos math son una serie de objetos math son aquellos que tienen metodos propios y se usan para para algunas operaciones matematicas

Math.pow(2,3) = este metodo nos permite potenciar un numero , es decir 2 elevado 3 , es igual a 2x2x2 = 8
// 8

Math.round (0.49) = Este comando redondea un numero decimal , si tenemos 0,49 el relutado va a ser 0 pero si tenemos 0,50 el resultado es 1 
// 0
Math.round (0.50)
// 1

Math.floor (5.93) = redondeara el numero decimal al entero de menor valor 
// 5

Nath.ceil ( 3.27) = redondeara el numero decila al entero de mayor valor 
// 4 

Math.max (1,2,3,4,5); = toma el valor maximo de un conjunto 
//5
math.min (1,2,3,4,5); = toma el valor minimo de un conjunto
//1
math.random () = genera un nimero aleatorio . Es importante tener en cuenta que el numero que se genera es entre el 1 y el cero 
// 0,80498374